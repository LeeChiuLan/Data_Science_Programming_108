library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-8")
test
all_tag_nodes <- character(0)
rank <- 1   # get the top-10
for(i in 1:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
all_tag_nodes <- c(all_tag_nodes, nodes)
}
all_tag_nodes
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-8")
test
all_tag_nodes <- character(0)
rank <- 1   # get the top-10
for(i in 1:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
all_tag_nodes <- c(all_tag_nodes, nodes)
}
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-8")
test
all_tag_nodes <- character(0)
rank <- 1   # get the top-10
for(i in 1:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
#all_tag_nodes <- c(all_tag_nodes, nodes)
}
nodes
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, "li .rank-1")
test
all_tag_nodes <- character(0)
rank <- 1   # get the top-10
for(i in 1:rank){
rank_tag <- paste0("li .rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
#all_tag_nodes <- c(all_tag_nodes, nodes)
}
nodes
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- character(0)
rank <- 1   # get the top-10
for(i in 1:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
#all_tag_nodes <- c(all_tag_nodes, nodes)
}
nodes
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-8")
test
all_tag_nodes <- character(0)
rank <- 8   # get the top-10
for(i in 8:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
#all_tag_nodes <- c(all_tag_nodes, nodes)
}
nodes
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-8")
test
all_tag_nodes <- character(0)
rank <- 8   # get the top-10
for(i in 8:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
all_tag_nodes <- c(all_tag_nodes, nodes)
}
nodes
all_tag_nodes[1]
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- test
rank <- 10   # get the top-10
for(i in 2:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
append(all_tag_nodes, nodes)
}
nodes
all_tag_nodes
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- test
rank <- 10   # get the top-10
for(i in 2:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
append(all_tag_nodes, nodes)
}
head(all_tag_nodes)
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- c(test)
rank <- 10   # get the top-10
for(i in 2:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
append(all_tag_nodes, nodes)
}
all_tag_nodes
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- c(test)
all_tag_nodes
rank <- 10   # get the top-10
for(i in 2:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
append(all_tag_nodes, nodes)
}
all_tag_nodes
library(dplyr)
library(xml2)
library(rvest)
library(wordcloud)
full_page <- read_html("https://www.pixnet.net/blog/articles/category/33")
full_page
test <- html_node(full_page, ".rank-1")
test
all_tag_nodes <- c(test)
all_tag_nodes
rank <- 10   # get the top-10
for(i in 2:rank){
rank_tag <- paste0(".rank-",i)
cat(rank_tag)
nodes <- html_node(full_page, rank_tag)
all_tag_nodes <- rbind(all_tag_nodes, nodes)
}
all_tag_nodes
setwd("~/Desktop/GitHub/Data_Science_Programming_108/week2/part1")
library(dplyr)
filename <- "../../Datasets/CLAIM.csv"
data_raw<-read.csv(filename, header=T, sep=",")
library(dplyr)
filename <- "../../Datasets/CLAIM.csv"
#data_raw<-read.csv(filename, header=T, sep=",")
data_raw<-read.csv(filename)
Sys.getenv(LANG="en")
Sys.getenv(LANGUAGE="en")
Sys.setenv(LANGUAGE="en")
library(dplyr)
filename <- "../../Datasets/CLAIM.csv"
#data_raw<-read.csv(filename, header=T, sep=",")
data_raw<-read.csv(filename, header=T, sep=",")
library(dplyr)
filename <- "../../Datasets/CLAIM.csv"
#data_raw<-read.csv(filename, header=T, sep=",")
data_raw<-read.csv(filename)
library(dplyr)
filename <- "../../Datasets/CLAIM.csv"
data_raw<-read.csv(filename, header=T, sep=",",fileEncoding ="UTF-8")
View(data_raw)
View(data)
View(data)
View(data)
View(data)
filename <- "../../Datasets/CLAIM.csv"
data_raw<-read.csv(filename, sep=",",fileEncoding ="UTF-8")
library(dplyr)
library(readxl)
library(geosphere)
sitedata_raw<-read.csv("../../Datasets/空氣品質監測站Eng.csv", header=T, sep=",")
AQIfile <- "../../Datasets/ATM00679_2019_0322_0430.xlsx"
AQIdata_raw <- read_xlsx(AQIfile)
head(AQIdata_raw)
str(AQIdata_raw)
#--------------- [DataSet] Site ---------------
sitedata <- select(sitedata_raw, Name, Longitude,Latitude) %>%
rename(SiteName=Name)
sitedata = sitedata[sitedata$SiteName != "",]    # remove empty row
dim(sitedata)
#sitedata$SiteName <- paste(sitedata$SiteName,"Site", sep="_")   #append "Site" to each $Name
head(sitedata)
getDistm <- function(lon1, lat1,lon2, lat2) {
d <- distm (c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(d)
}
# functiion: getTheNearestDistm
appTheNearestDistm <- function(dat,col1,col2){
num <- nrow(dat)
for(i in 1:num){
minDistm <- .Machine$double.xmax
ptr <- NULL
for(j in 1:num){
if(i!=j){
d <- getDistm(dat[i,col1],dat[i,col2], dat[j,col1],dat[j,col2])
if(d < minDistm){
minDistm <- d
ptr <- j
}
}
}
dat[i,"NearestSiteDistm"] <- minDistm
dat[i,"NearestSite"] <- dat[ptr,"SiteName"]
}
return(dat)
}
sitedata=appTheNearestDistm(sitedata,"Longitude", "Latitude")
#--------------- Merge DataSet ---------------
AQIdata=merge(AQIdata_raw, sitedata, by.x="SiteName")
head(AQIdata)
# function: isContained
isContained <- function(r,Obj1, Obj2) {
d <- getDistm(Obj1, Obj2)
if (d <= r){
return (TRUE)
}else
{
return (FALSE)
}
}
View(AQIdata)
library(ggplot2)
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
ggplot(data = Xindian_data, aes(x=x, y= AQI)) + geom_line()
ggplot(data = Xindian_data, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = Xindian_data, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
library(plyr)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
ddply(Xindian_data, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
df <- Xindian_data
df <- df[-which(df$AQI == ""), ]
df <- df[-which(df$PM25SubIndex == ""), ]
ggplot(data = df, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = df, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
library(ggplot2)
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
df <- Xindian_data
df <- df[-which(df$AQI == ""), ]
df <- df[-which(df$PM25SubIndex == ""), ]
ggplot(data = df, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = df, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
library(plyr)
ddply(Xindian_data, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
ddply(df, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
library(ggplot2)
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
df <- Xindian_data
df <- df[-which(df$AQI == ""), ]
df <- df[-which(df$PM25SubIndex == ""), ]
ggplot(data = df, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = df, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
View(df)
library(dplyr)
library(readxl)
library(geosphere)
sitedata_raw<-read.csv("../../Datasets/空氣品質監測站Eng.csv", header=T, sep=",")
AQIfile <- "../../Datasets/ATM00679_2019_0322_0430.xlsx"
AQIdata_raw <- read_xlsx(AQIfile)
head(AQIdata_raw)
#--------------- [DataSet] Site ---------------
sitedata <- select(sitedata_raw, Name, Longitude,Latitude) %>%
rename(SiteName=Name)
sitedata = sitedata[sitedata$SiteName != "",]    # remove empty row
dim(sitedata)
#sitedata$SiteName <- paste(sitedata$SiteName,"Site", sep="_")   #append "Site" to each $Name
head(sitedata)
getDistm <- function(lon1, lat1,lon2, lat2) {
d <- distm (c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(d)
}
# functiion: getTheNearestDistm
appTheNearestDistm <- function(dat,col1,col2){
num <- nrow(dat)
for(i in 1:num){
minDistm <- .Machine$double.xmax
ptr <- NULL
for(j in 1:num){
if(i!=j){
d <- getDistm(dat[i,col1],dat[i,col2], dat[j,col1],dat[j,col2])
if(d < minDistm){
minDistm <- d
ptr <- j
}
}
}
dat[i,"NearestSiteDistm"] <- minDistm
dat[i,"NearestSite"] <- dat[ptr,"SiteName"]
}
return(dat)
}
sitedata=appTheNearestDistm(sitedata,"Longitude", "Latitude")
#--------------- Merge DataSet ---------------
AQIdata=merge(AQIdata_raw, sitedata, by.x="SiteName")
head(AQIdata)
library(ggplot2)
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
df <- Xindian_data
df <- df[-which(df$AQI == ""), ]
df <- df[-which(df$PM25SubIndex == ""), ]
ggplot(data = df, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = df, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
View(Xindian_data)
df <- Xindian_data
df <- df[-which(df$AQI == ""), ]
df <- Xindian_data
View(df)
df <- df[!(df$AQI == ""), ]
df <- df[!(df$PM25SubIndex == ""), ]
library(plyr)
ddply(Xindian_data, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
ddply(df, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
library(dplyr)
library(readxl)
library(geosphere)
sitedata_raw<-read.csv("../../Datasets/空氣品質監測站Eng.csv", header=T, sep=",")
AQIfile <- "../../Datasets/ATM00679_2019_0322_0430.xlsx"
AQIdata_raw <- read_xlsx(AQIfile)
head(AQIdata_raw)
#--------------- [DataSet] Site ---------------
sitedata <- select(sitedata_raw, Name, Longitude,Latitude) %>%
rename(SiteName=Name)
sitedata = sitedata[sitedata$SiteName != "",]    # remove empty row
dim(sitedata)
#sitedata$SiteName <- paste(sitedata$SiteName,"Site", sep="_")   #append "Site" to each $Name
head(sitedata)
getDistm <- function(lon1, lat1,lon2, lat2) {
d <- distm (c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
return(d)
}
# functiion: getTheNearestDistm
appTheNearestDistm <- function(dat,col1,col2){
num <- nrow(dat)
for(i in 1:num){
minDistm <- .Machine$double.xmax
ptr <- NULL
for(j in 1:num){
if(i!=j){
d <- getDistm(dat[i,col1],dat[i,col2], dat[j,col1],dat[j,col2])
if(d < minDistm){
minDistm <- d
ptr <- j
}
}
}
dat[i,"NearestSiteDistm"] <- minDistm
dat[i,"NearestSite"] <- dat[ptr,"SiteName"]
}
return(dat)
}
sitedata=appTheNearestDistm(sitedata,"Longitude", "Latitude")
#--------------- Merge DataSet ---------------
AQIdata=merge(AQIdata_raw, sitedata, by.x="SiteName")
head(AQIdata)
library(ggplot2)
# ordering of weekday
AQIdata$Weekday <- ordered(AQIdata$Weekday, levels=c("Mon", "Tue", "Wed", "Thu",
"Fri", "Sat", "Sun"))
Xindian_data<-AQIdata%>%filter(SiteName=="新店")
# remove a row if value == ""
df <- Xindian_data
df <- df[!(df$AQI == ""), ]
df <- df[!(df$PM25SubIndex == ""), ]
ggplot(data = df, aes(x=MonitorDate, y= AQI)) + geom_line()
ggplot(data = df, aes(x= Class)) + geom_bar(fill = "lightblue", colour="black")
library(plyr)
ddply(df, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
# function: isContained
isContained <- function(r,Obj1, Obj2) {
d <- getDistm(Obj1, Obj2)
if (d <= r){
return (TRUE)
}else
{
return (FALSE)
}
}
ggplot(df, aes(x=Weekday, y=Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="[Site:新店] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
ddply(df, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
ggplot(df, aes(x=Weekday, y=Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="[Site:新店] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
df_AQI <- ddply(df, .(Weekday), summarize,  Rate_AQI=mean(AQI), Rate_PM25=mean(PM25SubIndex))
ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="[Site:新店] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 3, hjust = 0.5, vjust = 3, position =     "stack")
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 5, hjust = 0.5, vjust = 3, position = "stack")
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position = "stack")
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position=position_dodge(width=0.9), vjust=-0.25)
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position=position_dodge(width=0.9), vjust=-0.25)
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position=position_dodge(width=0.9*86400), vjust=-0.25)
position=position_dodge(width=0.9), vjust=-0.25
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position=position_dodge(width=0.9*86400), vjust=-0.25)
g <- ggplot(df_AQI, aes(x=Weekday, y=Rate_AQI, label = Rate_AQI)) +
geom_bar(stat="identity", width=.5, fill="tomato3") +
labs(title="Site:[Xindian] AQI",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
g + geom_text(aes(label = Rate_AQI),size = 4, hjust = 0.5, vjust = 3, position=position_dodge(width=0.9), vjust=-0.25)
setwd("~/Desktop/GitHub/Data_Science_Programming_108/week2/part1")
