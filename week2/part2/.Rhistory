mappingTable_raw<-read_xlsx("../../Datasets/行政區代碼表_Taiwan_Geocode_103_v2.xlsx")
head(mappingTable_raw)
### 只要縣市中英對照
mappingTable <- mappingTable_raw %>% select(2, 4) %>%
rename(City_Eng=縣市英文名_100,City_CH=縣市名_100)
head(mappingTable)
### 英文名去除空白
mappingTable$City_Eng <- gsub('\\s+', '', mappingTable$City_Eng)
head(mappingTable)
### function getEngName()
library(stringr)
getEngName <- function(grepString){
ans <- mappingTable %>% filter(str_detect(City_CH, grepString))
return(ans$City_Eng)
}
#### 驗證function getEngName()
TaiEng <- getEngName("臺北")
TaiEng
df <- restaurantdata_raw
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
itemName<-cutter[txt[4]]
head(itemName)
setwd("~/Desktop/GitHub/Data_Science_Programming_108/week2/part2")
itemName<-cutter[txt]
head(itemName)
doc <- df["Description"]
head(doc)
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
itemName<-cutter[txt[]]
head(itemName)
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
itemName<-cutter[txt]
head(itemName)
for(i in txt){
t<-itemName<-cutter[i]
print(t)
}
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
itemName<-cutter[txt]
for(i in itemName){
print(i)
}
head(itemName)
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
for(i in txt){
t<-itemName<-cutter[i]
print(t)
}
for(i in txt){
t<-itemName<-cutter[i]
print(t[1])
}
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
for(i in txt){
t<-itemName<-cutter[i]
print(t[1] %>% getEngName)
}
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
for(i in txt){
t<-itemName<-cutter[i]
s<-t[1] %>% getEngName
print(s)
}
mappingTable$City_Eng <- gsub('\\s+', '', mappingTable$City_Eng)
head(mappingTable)
mappingTable <- mappingTable_raw %>% select(2, 4) %>%
rename(City_Eng=縣市英文名_100,City_CH=縣市名_100)
head(mappingTable)
library(dplyr)
library(tmcn)
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
library(rvest)
library(xml2)
library(rvest)
library(readxl)
library(kableExtra)
## 依縣市為Documents <- 有興趣縣市之間的關係
## 讀入資料
### [餐飲 - 觀光資訊資料庫](https://data.gov.tw/dataset/7779)
restaurantfile <- "../../convertcsv.csv"
restaurantdata_raw<-read.csv(restaurantfile, header=T, sep=",")
kable(head(restaurantdata_raw))
### [臺灣地區縣市名稱中英對照](https://alerts.ncdr.nat.gov.tw/Document/%E8%A1%8C%E6%94%BF%E5%8D%80%E4%BB%A3%E7%A2%BC%E8%A1%A8_Taiwan_Geocode_103_v2.xlsx)
mappingTable_raw<-read_xlsx("../../Datasets/行政區代碼表_Taiwan_Geocode_103_v2.xlsx")
head(mappingTable_raw)
### 只要縣市中英對照
mappingTable <- mappingTable_raw %>% select(2, 4) %>%
rename(City_Eng=縣市英文名_100,City_CH=縣市名_100)
head(mappingTable)
### 英文名去除空白
mappingTable$City_Eng <- gsub('\\s+', '', mappingTable$City_Eng)
head(mappingTable)
### function getEngName()
library(stringr)
getEngName <- function(grepString){
ans <- mappingTable %>% filter(str_detect(City_CH, grepString))
return(ans$City_Eng)
}
#### 驗證function getEngName()
TaiEng <- getEngName("臺北")
TaiEng
df <- restaurantdata_raw
txt <- as.character(df["Add"][[1]][])
head(txt)
cutter <- worker("tag")
for(i in txt){
t<-itemName<-cutter[i]
s<-t[1] %>% getEngName
print(s)
}
cutter <- worker("tag")
getEngNameByAdd <- function(refDF){
txt <- as.character(df["Add"][[1]][])
#head(txt)
for(i in txt){
t<-itemName<-cutter[i]
s<-t[1] %>% getEngName
print(s)
}
}
df %>% getEngNameByAdd
txt <- as.character(df["Add"][[1]][])
num<-nrow(txt)
num
head(txt)
num<-count(txt)
num
class(txt)
num<-nchar(txt)
num
num<-lengths(txt)
num
head(txt)
tail(txt)
num<-count(txt)
num
cutter <- worker("tag")
t<-cutter[txt[1]]
num <- table(txt)
num
num <- length(table(txt))
num
nrow(df)
for(obj in df){
cat(obj)
}
txtAdd <- as.character(df["Add"][[1]][])
tail(txtAdd)
num1 <- length(table(txtAdd))
num1
txt <- as.character(df["Description"][[1]][])
tail(txt)
num2 <- length(table(txt))
num2
df <- df[-which(df$Add == ""), ]
df <- df[-which(df$Description == ""), ]
txtAdd <- as.character(df["Add"][[1]][])
tail(txtAdd)
num1 <- length(table(txtAdd))
num1
txt <- as.character(df["Description"][[1]][])
tail(txt)
num2 <- length(table(txt))
num2
df <- restaurantdata_raw
df <- df[-which(df$Add == ""), ]
df <- df[-which(df$Description == ""), ]
head(df)
txtAdd <- as.character(df["Add"][[1]][])
tail(txtAdd)
num1 <- length(table(txtAdd))
num1
txt <- as.character(df["Description"][[1]][])
tail(txt)
num2 <- length(table(txt))
num2
df <- restaurantdata_raw
df = df[df$Add != "",]    # remove empty row
df = df[df$Description != "",]    # remove empty row
head(df)
txtAdd <- as.character(df["Add"][[1]][])
tail(txtAdd)
num1 <- length(table(txtAdd))
num1
txt <- as.character(df["Description"][[1]][])
tail(txt)
num2 <- length(table(txt))
num2
num1
x<-matrix(1:12,ncol = 3)
x
apply(x,2,sum)
apply(x,1,sum)
cutter <- worker("tag")
apply(df, 1, function(Add,Description) {
txt <-as.character(Add[[1]][])
head(txt)
})
apply(df, 1, function(Add,Description) {
txt <- Add[[1]][1]
head(txt)
txt1 <-as.character(txt)
})
apply(df, 1, function(Add,Description) {
txt <- Add[[1]][1]
print(txt)
txt1 <-as.character(txt)
})
df <- restaurantdata_raw
df = df[df$Add != "",]    # remove empty row
df = df[df$Description != "",]    # remove empty row
head(df)
cutter <- worker("tag")
apply(df, 1, function(Add,Description) {
txt <- Add[[1]][1]
print(txt)
txt1 <-as.character(txt)
})
apply(df, 2, function(Add,Description) {
txt <- Add[[1]][1]
print(txt)
txt1 <-as.character(txt)
})
apply(df, 2, function(Add,Description) {
head(Add)
#txt <-as.character(Add)
#print(txt)
})
head(df)
cutter <- worker("tag")
apply(df, 2, function(x) {
head(Add)
#txt <-as.character(Add)
#print(txt)
})
apply(df, 2, function(Add,Description) {
head(Add)
head(Description)
#txt <-as.character(Add)
#print(txt)
})
apply(df, 2, function(x) myfunc(x$Add,x$Description) {
head(Add)
head(Description)
#txt <-as.character(Add)
#print(txt)
})
apply(df, 2, function(x) myfunc(Add,Description) {
head(Add)
head(Description)
#txt <-as.character(Add)
#print(txt)
})
apply(df, 2, function(x) myfunc(Add,Description)(
head(Add)
head(Description)
#txt <-as.character(Add)
#print(txt)
))
a <- c("mm1","bbb1")
d <- c("day","zzz")
testdf[c(a,b)]
df[c(a,b)]
df[c(a,d)]
dff <- restaurantdata_raw
dff = dff[df$Add != "",]    # remove empty row
dff = dff[df$Description != "",]    # remove empty row
head(dff)
dff <- restaurantdata_raw
dff = dff[df$Add != "",]    # remove empty row
dff = dff[df$Description != "",]    # remove empty row
head(dff)
cutter <- worker("tag")
apply(dff, 2, function(x) {
print(x["Add"])
})
apply(dff, 2, function(x) {
print(x)
})
getdoc<- function(Add, Description){
head(Add)
}
sapply(restaurantdata_raw, getdoc)
dff <- restaurantdata_raw
dff = dff[df$Add != "",]    # remove empty row
dff = dff[df$Description != "",]    # remove empty row
head(dff)
cutter <- worker("tag")
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
head(Add)
}
mapply(getDoc7,dff$Add, dff$Description)
dff <- restaurantdata_raw
dff = dff[df$Add != "",]    # remove empty row
dff = dff[df$Description != "",]    # remove empty row
#head(dff)
cutter <- worker("tag")
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
head(Add)
}
mapply(getDoc7,dff$Add, dff$Description)
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
head(Add,6)
}
mapply(getDoc7,dff$Add, dff$Description)
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
#head(Add,6)
}
mapply(getDoc7,dff$Add, dff$Description)
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
head(Add)
}
mapply(getDoc7,dff$Add, dff$Description)
getDoc7 <- function(Add, Description){
#txt <- as.character(df["Add"][[1]][])
#head(Add)
cutter[Add]
}
mapply(getDoc7,dff$Add, dff$Description)
new_df <- dff %>% select(Add,Description)
num <- nrow(new_df)
num
head(new_df)
new_df <- dff %>% select(Add,Description)
head(new_df)
num <- nrow(new_df)
num
for(i in 1:num){
print(new_df[i,Add])
}
new_df <- dff %>% select(Add,Description)
head(new_df)
num <- nrow(new_df)
num
for(i in 1:num){
print(new_df[i,"Add"])
}
cutter <- worker("tag")
new_df <- dff %>% select(Add,Description)
head(new_df)
num <- nrow(new_df)
num
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
print(strlist)
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter(strlist)
print(t)
}
cutter <- worker("tag")
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter(strlist)
print(t)
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist]
print(t)
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][1]
print(t)
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][1]
print(t)
print(new_df[i,"Description"])
}
View(new_df)
View(new_df)
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][3]
print(t)
print(new_df[i,"Description"])
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][4]
print(t)
print(new_df[i,"Description"])
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][5]
print(t)
print(new_df[i,"Description"])
}
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
t<-cutter[strlist][][1] %>% getEngName
print(t)
print(new_df[i,"Description"])
}
cutter <- worker("tag")
new_df <- dff %>% select(Add,Description)
head(new_df)
num <- nrow(new_df)
num
for(i in 1:6){
strlist <- as.character(new_df[i,"Add"])
#print(strlist)
city<-cutter[strlist][][1] %>% getEngName
print(city)
doc <- new_df[i,"Description"]
print(doc)
name <- paste0('./DATA/', city, ".txt")
write(doc, name, append = TRUE)
}
library(tm)
Corpus( DirSource("./DATA") )
docs <- data.frame(doc_id = c("doc_1", "doc_2"),
text = c("This is a text.", "This another one."),
dmeta1 = 1:2, dmeta2 = letters[1:2],
stringsAsFactors = FALSE)
(ds <- DataframeSource(docs))
x <- Corpus(ds)
inspect(x)
meta(x)
Corpus( DirSource("./DATA") )
DirSource(system.file("texts", "txt", package = "tm"))
Corpus( DirSource("./DATA") )
DirSource(directory = ".",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
Corpus( DirSource("./DATA") )
DirSource(directory = "./DATA",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
dir.create(file.path("DATA"))
DirSource(directory = "./DATA",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
DirSource(directory = ".",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
txt <- system.file("texts", "./DATA", package = "tm")
Corpus( DirSource("./DATA") )
getSources()
getReaders()
mmm_corpus<-Corpus(DirSource("./DATA"))
Corpus(DirSource("."))
DirSource(directory = "./DATA",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
DirSource(directory = ".",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
writeCorpus(x, path = ".", filenames = NULL)
writeCorpus(x, path = "./DATA", filenames = NULL)
DirSource(directory = "./DATA",
encoding = "",
pattern = NULL,
recursive = FALSE,
ignore.case = FALSE,
mode = "text")
